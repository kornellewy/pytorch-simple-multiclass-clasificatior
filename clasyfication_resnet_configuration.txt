######################## EXAMPLE USAGE###########################
import torch
from PIL import Image
import torch.nn as nn
import torchvision
from torchvision import models, transforms
import numpy as np

# def your image path
image_path = ''

# def your model path can be relative can be apsolute
model_path = ''

# def transforms
transforms = transforms.Compose([
            transforms.Resize(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406],
                                 [0.229, 0.224, 0.225])
        ])

# check avalible device
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# load model
model = models.resnet50(pretrained=False).to(device)
for param in model.parameters():
    param.requires_grad = False
model.fc = nn.Sequential(
               nn.Linear(2048, 128),
               nn.ReLU(inplace=True),
               nn.Linear(128, 2)).to(device)
model.load_state_dict(torch.load(model_path), strict=False)
model = model.to(device)
model.eval()

# laod image
image = Image.open(image_path)
image_tensor = transforms(image)
image_tensor = image_tensor.unsqueeze(0)
image_tensor = image_tensor.to(device)
logps = model(image_tensor)
ps = torch.exp(logps)
top_p, top_class = ps.topk(1, dim=1)
index = top_class.item()

############################# INPUT #############################
image size: (224, 244, 3)

############################ OUTPUT #############################
int value: 0 or 1
